(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{105:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return b}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),s=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},u=function(e){var n=s(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},f=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),f=r,b=u["".concat(o,".").concat(f)]||u[f]||p[f]||i;return t?a.a.createElement(b,d(d({ref:n},c),{},{components:t})):a.a.createElement(b,d({ref:n},c))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=f;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d.mdxType="string"==typeof e?e:r,o[1]=d;for(var c=2;c<i;c++)o[c]=t[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},91:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return o})),t.d(n,"toc",(function(){return d})),t.d(n,"default",(function(){return c}));var r=t(3),a=(t(0),t(105));const i={id:"validation",title:"Validation",sidebar_label:"Validation",slug:"/validation"},o={unversionedId:"validation",id:"validation",isDocsHomePage:!1,title:"Validation",description:"We can add validations to each field. You can pass validations in option inside createFormModel API. There are multiple ways to define validation for a field.",source:"@site/docs/validation.md",slug:"/validation",permalink:"/formst/docs/validation",editUrl:"https://github.com/formstjs/formst-docs/docs/validation.md",version:"current",sidebar_label:"Validation",sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/formst/docs/"},next:{title:"Nested Forms",permalink:"/formst/docs/nested"}},d=[{value:"Default way of adding validation",id:"default-way-of-adding-validation",children:[]},{value:"Adding validators",id:"adding-validators",children:[]},{value:"Custom function",id:"custom-function",children:[]}],l={toc:d};function c({components:e,...n}){return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,"We can add validations to each field. You can pass validations in option inside ",Object(a.b)("inlineCode",{parentName:"p"},"createFormModel")," API. There are multiple ways to define validation for a field."),Object(a.b)("h3",{id:"default-way-of-adding-validation"},"Default way of adding validation"),Object(a.b)("p",null,"Validations can be passed as array. Currently ",Object(a.b)("inlineCode",{parentName:"p"},"required"),", ",Object(a.b)("inlineCode",{parentName:"p"},"email")," and ",Object(a.b)("inlineCode",{parentName:"p"},"number")," is supported."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"const TodoForm = createFormModel(\n  'TodoForm',\n  {\n    title: types.string,\n    description: types.string,\n    user: types.string\n  },\n  {\n    validation: {\n      title: 'required',\n      description: 'required',\n      user: ['required', 'email']\n    },\n  }\n);\n")),Object(a.b)("h3",{id:"adding-validators"},"Adding validators"),Object(a.b)("p",null,"You can also add more validators."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"defineValidators({\n  minLen: (value: any) => ({\n    valid: typeof value === 'string' && value.length > 3,\n    message: 'Input should be more than 3 characters',\n  })\n});\n")),Object(a.b)("h3",{id:"custom-function"},"Custom function"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),"const TodoForm = createFormModel(\n  'TodoForm',\n  {\n    title: types.string,\n    description: types.string,\n  },\n  {\n    validation: {\n      title: ['required'],\n      description: (value) => {\n        if(!value) return \"This is required field\";\n      },\n    },\n  }\n);\n")))}c.isMDXComponent=!0}}]);