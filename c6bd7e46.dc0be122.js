(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{105:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),d=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=d(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=d(n),u=r,m=b["".concat(i,".").concat(u)]||b[u]||p[u]||a;return n?o.a.createElement(m,c(c({ref:t},s),{},{components:n})):o.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},95:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return s}));var r=n(3),o=(n(0),n(105));const a={id:"gettingStarted",title:"Getting Started",sidebar_label:"Getting Started",slug:"/"},i={unversionedId:"gettingStarted",id:"gettingStarted",isDocsHomePage:!1,title:"Getting Started",description:"Introduction",source:"@site/docs/gettingStarted.md",slug:"/",permalink:"/formst/docs/",editUrl:"https://github.com/formstjs/formst-docs/docs/gettingStarted.md",version:"current",sidebar_label:"Getting Started",sidebar:"someSidebar",next:{title:"Validation",permalink:"/formst/docs/validation"}},c=[{value:"Introduction",id:"introduction",children:[{value:"Installation",id:"installation",children:[]},{value:"Basic Usage",id:"basic-usage",children:[]}]}],l={toc:c};function s({components:e,...t}){return Object(o.b)("wrapper",Object(r.a)({},l,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"introduction"},"Introduction"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Formst")," is the new way to create and handle forms. Unlike famous libraries like Formik that are UI-first, Formst is data first. It is based on ",Object(o.b)("strong",{parentName:"p"},"MST"),"(MobX-State-Tree). What you get out of the box is a highly performant form library that helps you create interdependent fields of a table and add validations to it."),Object(o.b)("h3",{id:"installation"},"Installation"),Object(o.b)("p",null,"Use ",Object(o.b)("inlineCode",{parentName:"p"},"yarn")," or ",Object(o.b)("inlineCode",{parentName:"p"},"npm")," to install this library:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"# yarn\nyarn add formst\n\n# npm\nnpm add formst\n")),Object(o.b)("h3",{id:"basic-usage"},"Basic Usage"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Create a form model")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"const TodoForm = createFormModel(\n  'TodoForm',\n  {\n    title: types.string,\n    description: types.string,\n  },\n  {\n    validation: {\n      title: ['required'],\n      description: 'required',\n    },\n  }\n).actions(self => ({\n  onSubmit: () => {\n    setTimeout(() => {\n      alert(JSON.stringify(getSnapshot(self), null, 2));\n    }, 100);\n  },\n}));\n")),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},"Create an instance of the model")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"const todoForm = TodoForm.create({\n  title: '',\n  description: '',\n});\n")),Object(o.b)("ol",{start:3},Object(o.b)("li",{parentName:"ol"},"Wrap the components inside ",Object(o.b)("inlineCode",{parentName:"li"},"Formst")," and use ",Object(o.b)("inlineCode",{parentName:"li"},"Field")," API to render the fields")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'<Formst formInstance={todoForm}>\n  <form onSubmit={todoForm.handleSubmit}>\n    <Field name="title" />\n    <ErrorMessage name="title" />\n    <br />\n    <Field name="description" />\n    <ErrorMessage name="description" />\n    <button type="submit">Submit</button>\n  </form>\n</Formst>\n')))}s.isMDXComponent=!0}}]);